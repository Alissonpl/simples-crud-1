{"ast":null,"code":"var _jsxFileName = \"/home/alisson/Documentos/www/product/frontend/src/pages/Componentes/form/edit.js\";\nimport React, { useState, useEffect } from 'react';\n\nconst EditUserForm = props => {\n  const [user, setUser] = useState(props.currentUser);\n  useEffect(() => {\n    setUser(props.currentUser);\n  }, [props]); // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\n\n  const handleInputChange = event => {\n    const {\n      nome,\n      value\n    } = event.target;\n    setUser({ ...user,\n      [nome]: value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: event => {\n      event.preventDefault();\n      props.updateUser(user.id, user);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"nome\",\n    value: user.nome,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, \"Username\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"descricao\",\n    value: user.descricao,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"modelo\",\n    value: user.modelo,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"marca\",\n    value: user.marca,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"tamanho\",\n    value: user.tamanho,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"valor\",\n    value: user.valor,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }), \"modelo: user.modelo, marca: user.marca, tamanho: user.tamanho, valor: user.valor, quantidade: user.quantidade\", /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \"Update user\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => props.setEditing(false),\n    className: \"button muted-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, \"Cancel\"));\n};\n\nexport default EditUserForm;","map":{"version":3,"sources":["/home/alisson/Documentos/www/product/frontend/src/pages/Componentes/form/edit.js"],"names":["React","useState","useEffect","EditUserForm","props","user","setUser","currentUser","handleInputChange","event","nome","value","target","preventDefault","updateUser","id","descricao","modelo","marca","tamanho","valor","setEditing"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5B,QAAM,CAAEC,IAAF,EAAQC,OAAR,IAAoBL,QAAQ,CAACG,KAAK,CAACG,WAAP,CAAlC;AAEAL,EAAAA,SAAS,CACP,MAAM;AACJI,IAAAA,OAAO,CAACF,KAAK,CAACG,WAAP,CAAP;AACD,GAHM,EAIP,CAAEH,KAAF,CAJO,CAAT,CAH4B,CAS5B;;AAEA,QAAMI,iBAAiB,GAAGC,KAAK,IAAI;AACjC,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,KAAK,CAACG,MAA9B;AAEAN,IAAAA,OAAO,CAAC,EAAE,GAAGD,IAAL;AAAW,OAACK,IAAD,GAAQC;AAAnB,KAAD,CAAP;AACD,GAJD;;AAMA,sBACE;AACE,IAAA,QAAQ,EAAEF,KAAK,IAAI;AACjBA,MAAAA,KAAK,CAACI,cAAN;AAEAT,MAAAA,KAAK,CAACU,UAAN,CAAiBT,IAAI,CAACU,EAAtB,EAA0BV,IAA1B;AACD,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,MAAxB;AAA+B,IAAA,KAAK,EAAEA,IAAI,CAACK,IAA3C;AAAiD,IAAA,QAAQ,EAAEF,iBAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF,eAUE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,WAAxB;AAAoC,IAAA,KAAK,EAAEH,IAAI,CAACW,SAAhD;AAA2D,IAAA,QAAQ,EAAER,iBAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,eAWE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,QAAxB;AAAiC,IAAA,KAAK,EAAEH,IAAI,CAACY,MAA7C;AAAqD,IAAA,QAAQ,EAAET,iBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,eAYE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,OAAxB;AAAgC,IAAA,KAAK,EAAEH,IAAI,CAACa,KAA5C;AAAmD,IAAA,QAAQ,EAAEV,iBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,eAaE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,SAAxB;AAAkC,IAAA,KAAK,EAAEH,IAAI,CAACc,OAA9C;AAAuD,IAAA,QAAQ,EAAEX,iBAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,eAcE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,OAAxB;AAAgC,IAAA,KAAK,EAAEH,IAAI,CAACe,KAA5C;AAAmD,IAAA,QAAQ,EAAEZ,iBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,gIAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAjBF,eAmBE;AAAQ,IAAA,OAAO,EAAE,MAAMJ,KAAK,CAACiB,UAAN,CAAiB,KAAjB,CAAvB;AAAgD,IAAA,SAAS,EAAC,qBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBF,CADF;AAyBD,CA1CD;;AA4CA,eAAelB,YAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst EditUserForm = props => {\n  const [ user, setUser ] = useState(props.currentUser)\n\n  useEffect(\n    () => {\n      setUser(props.currentUser)\n    },\n    [ props ]\n  )\n  // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\n\n  const handleInputChange = event => {\n    const { nome, value } = event.target\n\n    setUser({ ...user, [nome]: value })\n  }\n\n  return (\n    <form\n      onSubmit={event => {\n        event.preventDefault()\n\n        props.updateUser(user.id, user)\n      }}\n    >\n      <label>Name</label>\n      <input type=\"text\" name=\"nome\" value={user.nome} onChange={handleInputChange} />\n      <label>Username</label>\n      <input type=\"text\" name=\"descricao\" value={user.descricao} onChange={handleInputChange} />\n      <input type=\"text\" name=\"modelo\" value={user.modelo} onChange={handleInputChange} />\n      <input type=\"text\" name=\"marca\" value={user.marca} onChange={handleInputChange} />\n      <input type=\"text\" name=\"tamanho\" value={user.tamanho} onChange={handleInputChange} />\n      <input type=\"text\" name=\"valor\" value={user.valor} onChange={handleInputChange} />\n    modelo: user.modelo, marca: user.marca, tamanho: user.tamanho, valor: user.valor, quantidade: user.quantidade\n\n      <button>Update user</button>\n      \n      <button onClick={() => props.setEditing(false)} className=\"button muted-button\">\n        Cancel\n      </button>\n    </form>\n  )\n}\n\nexport default EditUserForm"]},"metadata":{},"sourceType":"module"}